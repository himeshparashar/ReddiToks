export interface GeminiRequest {
  prompt: string;
  maxTokens?: number;
  temperature?: number;
}

export interface GeminiResponse {
  content: string;
  usage: {
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
  };
}

export class GeminiClient {
  private apiKey: string;
  private modelName: string;
  private baseUrl: string =
    "https://generativelanguage.googleapis.com/v1beta/models";

  constructor(apiKey: string, modelName: string = "gemini-2.0-flash") {
    this.apiKey = apiKey;
    this.modelName = modelName;
  }

  async generateContent(request: GeminiRequest): Promise<GeminiResponse> {
    try {
      const url = `${this.baseUrl}/${this.modelName}:generateContent?key=${this.apiKey}`;

      const headers = {
        "Content-Type": "application/json",
      };

      const data = {
        contents: [
          {
            parts: [
              {
                text: request.prompt,
              },
            ],
          },
        ],
        generationConfig: {
          maxOutputTokens: request.maxTokens || 4000,
          temperature: request.temperature || 0.7,
        },
      };

      const response = await fetch(url, {
        method: "POST",
        headers: headers,
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }

      const responseData = await response.json();

      // Extract the generated text from Gemini's response format
      const generatedText =
        responseData.candidates?.[0]?.content?.parts?.[0]?.text || "";

      if (!generatedText) {
        throw new Error("No content generated by Gemini");
      }

      // Estimate token usage (Gemini API doesn't always provide detailed usage info)
      const usage = {
        promptTokens: this.estimateTokens(request.prompt),
        completionTokens: this.estimateTokens(generatedText),
        totalTokens:
          this.estimateTokens(request.prompt) +
          this.estimateTokens(generatedText),
      };

      return {
        content: generatedText,
        usage,
      };
    } catch (error) {
      console.error("Gemini API Error:", error);
      throw new Error(`Gemini API call failed: ${error}`);
    }
  }

  private estimateTokens(text: string): number {
    // Rough estimation: ~4 characters per token
    return Math.ceil(text.length / 4);
  }
}
